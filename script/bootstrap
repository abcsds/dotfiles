#!/usr/bin/env bash
#
# bootstrap installs things.

cd "$(dirname "$0")/.."
DOTFILES_ROOT=$(pwd)
# shortcut to this dotfiles path is $DZSH
export DZSH=$HOME/.dotfiles
# Linux distro being used
export DISTRO=$(cat /etc/issue | awk '{print $1}')
# Check if in vconsole
case $(tty) in
  (/dev/tty[1-9]) export CONSOLE='virtual';;
              (*) export CONSOLE='terminal';;
esac
# Check the OS
export OS="$(uname -s)"
# Set the projects folder
export PROJECTS_FOLDER=~/github
# Set Default Editor
export EDITOR=vim
# Set 256 color term
export TERM="xterm-256color"

set -e

echo ''

info () {
  printf "  [ \033[00;34m..\033[0m ] $1"
}

user () {
  printf "\r  [ \033[0;33m?\033[0m ] $1 "
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

setup_gitconfig () {
  if ! [ -f git/gitconfig.symlink ]
  then
    info 'setup gitconfig'

    git_credential='cache'
    if [[ $OS == "Darwin" ]]; then
      git_credential='osxkeychain'
    fi

    user ' - What is your github author name?'
    read -e git_authorname
    user ' - What is your github author username?'
    read -e git_authorusername
    user ' - What is your github author email?'
    read -e git_authoremail

    sed -e "s/AUTHORNAME/$git_authorname/g" -e "s/AUTHORUSERNAME/$git_authorusername/g" -e "s/AUTHOREMAIL/$git_authoremail/g" -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" git/gitconfig.symlink.example > git/gitconfig.symlink

    success 'gitconfig'
  fi
}
setup_folder () {
  # Setup local files and folders
  mkdir -p $PROJECTS_FOLDER
  cat $DOTFILES_ROOT/zsh/localrc.symlink.example > $DOTFILES_ROOT/zsh/localrc.symlink
}

link_file () {
  local src=$1 dst=$2

  local overwrite= backup= skip=
  local action=

  if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]; then
    if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ] ; then

      local currentSrc="$(readlink $dst)"

      if [ "$currentSrc" == "$src" ]; then
        skip=true;
      else
        user "File already exists: $dst ($(basename "$src")), what do you want to do?\n\
        [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac

      fi

    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$overwrite" == "true" ]
    then
      rm -rf "$dst"
      success "removed $dst"
    fi

    if [ "$backup" == "true" ]
    then
      mv "$dst" "${dst}.backup"
      success "moved $dst to ${dst}.backup"
    fi

    if [ "$skip" == "true" ]
    then
      success "skipped $src"
    fi
  fi

  if [ "$skip" != "true" ]  # "false" or empty
  then
    ln -s "$1" "$2"
    success "linked $1 to $2"
  fi
}

install_dotfiles () {
  info 'installing dotfiles'

  local overwrite_all=false backup_all=false skip_all=false

  for src in $(find -H "$DOTFILES_ROOT" -maxdepth 2 -name '*.symlink')
  do
    dst="$HOME/.$(basename "${src%.*}")"
    link_file "$src" "$dst"
  done
}

install_homebrew () {
  # Setup homebrew.
  info "installing OSX dependencies \n"
  if source bin/dot
  then
    success "dependencies installed"
  else
    fail "error installing dependencies"
  fi
}

install_fonts () {
  # TODO: Linux - don't download if it exists
  # Download to symlinked folder
  # curl http://raw.github.com/gabrielelana/awesome-terminal-fonts/master/build/fontawesome-regular.ttf 2>/dev/null > $DOTFILES_ROOT/fonts/fonts.symlink/fontawesome-regular.ttf
  # curl http://raw.github.com/gabrielelana/awesome-terminal-fonts/master/build/octicons-regular.ttf 2>/dev/null > $DOTFILES_ROOT/fonts/fonts.symlink/octicons-regular.ttf
  # curl http://raw.github.com/gabrielelana/awesome-terminal-fonts/master/build/pomicons-regular.ttf 2>/dev/null > $DOTFILES_ROOT/fonts/fonts.symlink/pomicons-regular.ttf
  # Download configuration file
  # curl http://raw.github.com/gabrielelana/awesome-terminal-fonts/master/config/10-symbols.conf 2>/dev/null > $DOTFILES_ROOT/config/config.symlink/fontconfig/conf.d/10-symbols.conf
  # Update font cache
  if ! type fc-cache ; then
    info "Please install font cache tools\n"
  else
    if [[ $OS == "Linux" ]]; then
      # Install fonts under linux
      fc-cache -fv ~/.fonts
    fi
  fi
}

install_npm () {
  # Install npm packages
  if ! type npm  > /dev/null ; then
    info "Please install node manualy\n"
  else
    source $DOTFILES_ROOT/npm/install.sh
  fi
}

install_python () {
  # Install python packages
  if ! type pip > /dev/null ; then
    echo "There isn't pip"
  else
    source $DOTFILES_ROOT/python/install.sh
  fi
}
install_apm () {
  # Install python packages
  if ! type apm  > /dev/null ; then
    info "Please install apm manualy"
  else
    source $DOTFILES_ROOT/atom/install.sh
  fi
}

# ================= Actual installation

setup_gitconfig
setup_folder
install_dotfiles
install_homebrew

install_fonts
# install_npm
install_python
install_apm

# Install submodules
git submodule init
git submodule update

# vim --startuptime /dev/stdout +qall

# Set zsh
sudo chsh -s $(which zsh) $(whoami)

echo ''
echo '  All installed!'
